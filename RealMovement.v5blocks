{"wrkspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">my variable</variable><variable type=\"broadcast_msg\" id=\"Kj-c[^ja#)(aBGJsQpl7\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">checkRed</variable><variable type=\"broadcast_msg\" id=\"?qSd:d|I[2V7|(oxEPq=\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">checkBlue</variable><variable type=\"broadcast_msg\" id=\"v_g3O#8lNetabaUfb`mF\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">checkGreen</variable><variable type=\"broadcast_msg\" id=\"2TOO`3A5aAQI;chX`Pl*\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">message1</variable><variable type=\"broadcast_msg\" id=\"W-,m/le`)EVOI8JCu5!j\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">checkBrainPuzzles</variable><variable type=\"broadcast_msg\" id=\"|(^|55QfW9C2K{VJ^RFH\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">ReadyToGetCubes</variable><variable type=\"broadcast_msg\" id=\"!Nu,BD@6H0i-UHnD1UTP\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">GetReadyArms</variable><variable type=\"broadcast_msg\" id=\"~-Npy*ch;KwC=fku^eTh\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">GetMoving</variable><variable type=\"broadcast_msg\" id=\"x=@h=YSG|E4$PIX22#.D\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">MakingItdrop</variable></variables><block type=\"v5_events_when_autonomous\" id=\"GfmnA-?.;xe-KE|XOz|$\" x=\"-70\" y=\"-710\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"19!ddV14{G=z[$LyDVzy\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"dI-2Xu(!x0[}fMC@J{^`\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"VhCZ^*oaSf2Y3p*s+ue{\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"K.Wra6(1w12QMMyEy(9*\"><field name=\"NUM\">70.5</field></shadow></value><next><block type=\"v5_events_broadcast\" id=\"hbOqEcgYc+~tO2oI43x#\"><value name=\"BROADCAST_INPUT\"><shadow type=\"event_broadcast_menu\" id=\"P!lAv-J?x0_IgiLN#M5j\"><field name=\"BROADCAST_OPTION\" id=\"|(^|55QfW9C2K{VJ^RFH\" variabletype=\"broadcast_msg\">ReadyToGetCubes</field></shadow></value></block></next></block></next></block></next></block><block type=\"v5_events_when_broadcasted\" id=\"_}BXXlj1l4`eH-,Xc6;A\" x=\"-30\" y=\"-410\"><field name=\"BROADCAST_OPTION\" id=\"|(^|55QfW9C2K{VJ^RFH\" variabletype=\"broadcast_msg\">ReadyToGetCubes</field><next><block type=\"v5_motion_spin\" id=\"lvpS|.ZQ:6/ef3T#K@aq\"><field name=\"MOTOR\">Lift</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_control_wait\" id=\"b0Z*SboG@Q@uBx!P6xf}\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"3D.0FWH)_E;KNGE@SYZa\"><field name=\"NUM\">4</field></shadow></value><next><block type=\"v5_motion_stop_motor\" id=\"V0w+-mn?9d5t{O4+T.))\"><field name=\"MOTOR\">Lift</field><next><block type=\"v5_events_broadcast\" id=\".+`wZ2DOs;T2mwjI,m#4\"><value name=\"BROADCAST_INPUT\"><shadow type=\"event_broadcast_menu\" id=\"8dq)zjrDV|Lp81z-,*3@\"><field name=\"BROADCAST_OPTION\" id=\"!Nu,BD@6H0i-UHnD1UTP\" variabletype=\"broadcast_msg\">GetReadyArms</field></shadow></value></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_broadcasted\" id=\"kC/q1u7:kr[jfP;$MLt:\" x=\"-30\" y=\"-130\"><field name=\"BROADCAST_OPTION\" id=\"|(^|55QfW9C2K{VJ^RFH\" variabletype=\"broadcast_msg\">ReadyToGetCubes</field><next><block type=\"v5_motion_spin\" id=\"_BsO=c.G+@Y~2KKN_7Pm\"><field name=\"MOTOR\">Arm1</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_motion_spin\" id=\"Q)[R(K+6f_hpc^EQ3,a!\"><field name=\"MOTOR\">Arm2</field><field name=\"DIRECTION\">rev</field><next><block type=\"v5_drivetrain_drive_for\" id=\".fl8)b_?ss+hZ@@r9Np[\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"gvm`E#KmlWWd*KJ)@#`F\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"v5_events_broadcast\" id=\"u*AZ-_*Qe*P^8g{=!uT^\"><value name=\"BROADCAST_INPUT\"><shadow type=\"event_broadcast_menu\" id=\"}^lUr|7Q[uliR2%cbb1X\"><field name=\"BROADCAST_OPTION\" id=\"~-Npy*ch;KwC=fku^eTh\" variabletype=\"broadcast_msg\">GetMoving</field></shadow></value></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_broadcasted\" id=\"}sFM[GL!9xO37oxQLv6(\" x=\"-30\" y=\"150\"><field name=\"BROADCAST_OPTION\" id=\"~-Npy*ch;KwC=fku^eTh\" variabletype=\"broadcast_msg\">GetMoving</field><next><block type=\"v5_drivetrain_turn_for\" id=\"spO~a{EXM0`-rZB4(?Q:\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"r7uD}M!vapSx*8=LzEQg\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"Gp_bk;NYatwSOf@XG}IU\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"Zw?z2kyQyUiMtHCjr41}\"><field name=\"NUM\">22.5</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"WfK2u^9z)])}NpQwZ[lZ\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"k/sb?mdCVL`:5dG=,s{,\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"_)D8?fx@DMMw@(EL8)ej\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"h7.4E4/13=it51ROzF[/\"><field name=\"NUM\">47.5</field></shadow></value><next><block type=\"v5_motion_stop_motor\" id=\"rT*ad7#4Dz^ug@{GYh[,\"><field name=\"MOTOR\">Arm1</field><next><block type=\"v5_motion_stop_motor\" id=\"X4b?,p7aUbl`JNsO]q|U\"><field name=\"MOTOR\">Arm2</field><next><block type=\"v5_events_broadcast\" id=\"V4BNF}2XHx65Tpah}Os-\"><value name=\"BROADCAST_INPUT\"><shadow type=\"event_broadcast_menu\" id=\"PK)T:S0$jXjXeTksLbUM\"><field name=\"BROADCAST_OPTION\" id=\"x=@h=YSG|E4$PIX22#.D\" variabletype=\"broadcast_msg\">MakingItdrop</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_broadcasted\" id=\"u`/#!V1kgT!hme1H7=]T\" x=\"-30\" y=\"570\"><field name=\"BROADCAST_OPTION\" id=\"x=@h=YSG|E4$PIX22#.D\" variabletype=\"broadcast_msg\">MakingItdrop</field><next><block type=\"v5_motion_spin\" id=\"?N:tT.M2C@F]^ruKw5{B\"><field name=\"MOTOR\">Arm1</field><field name=\"DIRECTION\">rev</field><next><block type=\"v5_motion_spin\" id=\"%pkKC_;c58IIU6;o2^##\"><field name=\"MOTOR\">Arm1</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_control_wait\" id=\"ipKydxXsm2WYBpYlP%yX\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"gTFT-7`fuKf80QQUELDF\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"b7t+M@e~2.=O6tN9pEU#\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"ZSH3Dn$4Rxs.460uyU`:\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","setting":{"left":"Arm1","leftDir":"false","right":"Arm2","rightDir":"false","upDown":"Lift","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"}},{"port":[2,3,4,1,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"14","unit":"in","wheelbase":"0.3","wheelbaseUnit":"in"}},{"port":[5],"name":"Lift","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[6],"name":"Arm1","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[7],"name":"Arm2","customName":true,"deviceType":"Motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"}}],"slot":0,"cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"v5.h\"\n#include \"v5_cpp.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nvex::competition Competition;\n\ncontroller Controller1 = controller(primary);\nmotor leftMotorA = motor(PORT2, ratio18_1, false);\nmotor leftMotorB = motor(PORT3, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\n\nmotor rightMotorA = motor(PORT4, ratio18_1, true); \nmotor rightMotorB = motor(PORT1, ratio18_1, true); \nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\n\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 355.59999999999997, 7.619999999999999, mm, 1);\nmotor Lift = motor(PORT5, ratio18_1, true);\n\nmotor Arm1 = motor(PORT6, ratio18_1, false);\n\nmotor Arm2 = motor(PORT7, ratio18_1, true);\n\n\n//Vision sensor index vars.\nint Vision1_objectIndex = 0;\n\nint Brain_precision, Controller1_precision;\n\n\n// Generated code.\n\nbool RemoteControlCodeEnabled = true;\n\n\n\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_callback_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor next time the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control Arm1\n      if (Controller1.ButtonL1.pressing()) {\n        Arm1.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Arm1.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Arm1.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Arm2\n      if (Controller1.ButtonR1.pressing()) {\n        Arm2.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Arm2.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Arm2.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the Up/Down Buttons status to control Lift\n      if (Controller1.ButtonUp.pressing()) {\n        Lift.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        Lift.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped){\n        Lift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\nfloat my_variable;\n\nvex::event checkRed = vex::event();\nvex::event checkBlue = vex::event();\nvex::event checkGreen = vex::event();\nvex::event message1 = vex::event();\nvex::event checkBrainPuzzles = vex::event();\nvex::event ReadyToGetCubes = vex::event();\nvex::event GetReadyArms = vex::event();\nvex::event GetMoving = vex::event();\nvex::event MakingItdrop = vex::event();\n\nint onauton_autonomous_0() {\n  Drivetrain.setDriveVelocity(100.0, vex::velocityUnits::pct);\n  Drivetrain.driveFor(vex::directionType::fwd, 70.5, vex::distanceUnits::in, true);\n  ReadyToGetCubes.broadcast();\nreturn 0;\n}\n\nvoid onevent_ReadyToGetCubes_0() {\n  Lift.spin(vex::directionType::fwd);\n  wait(4.0, seconds);\n  Lift.stop();\n  GetReadyArms.broadcast();\n}\n\nvoid onevent_ReadyToGetCubes_1() {\n  Arm1.spin(vex::directionType::fwd);\n  Arm2.spin(vex::directionType::rev);\n  Drivetrain.driveFor(vex::directionType::fwd, 2.0, vex::distanceUnits::in, true);\n  GetMoving.broadcast();\n}\n\nvoid onevent_GetMoving_0() {\n  Drivetrain.turnFor(vex::turnType::left, 90.0, vex::rotationUnits::deg, true);\n  Drivetrain.driveFor(vex::directionType::fwd, 22.5, vex::distanceUnits::in, true);\n  Drivetrain.turnFor(vex::turnType::left, 90.0, vex::rotationUnits::deg, true);\n  Drivetrain.driveFor(vex::directionType::fwd, 47.5, vex::distanceUnits::in, true);\n  Arm1.stop();\n  Arm2.stop();\n  MakingItdrop.broadcast();\n}\n\nvoid onevent_MakingItdrop_0() {\n  Arm1.spin(vex::directionType::rev);\n  Arm1.spin(vex::directionType::fwd);\n  wait(3.0, seconds);\n  Drivetrain.driveFor(vex::directionType::rev, 4.0, vex::distanceUnits::in, true);\n}\nvoid VEXcode_driver_task() {\n// Start the driver control tasks....\n\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_callback_Controller1);\nwhile(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\nreturn;\n}\n\nvoid VEXcode_auton_task() {\n// Start the auton control tasks....\nvex::task auto0(onauton_autonomous_0);\nwhile( Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\nauto0.stop();\nreturn;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  srand(vex::timer::system());\n\n\n\n  // pre event registration\n  // register event handlers\n  ReadyToGetCubes(onevent_ReadyToGetCubes_0);\n  ReadyToGetCubes(onevent_ReadyToGetCubes_1);\n  GetMoving(onevent_GetMoving_0);\n  MakingItdrop(onevent_MakingItdrop_0);\n\n  task::sleep(15);\n  // post event registration\n\n  // when started blocks...\n\n  return 0;\n}","cppStatus":"true","platform":"V5","sdkVersion":"20191206.14.00.00","appVersion":"1.0.7-197","fileFormat":"0.1.1","icon":""}